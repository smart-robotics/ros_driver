#!/usr/bin/env python
import sys
import argparse

import rospy

import actionlib
from actionlib_msgs.msg import GoalStatus
from ensenso_camera_msgs.msg import RequestDataAction, RequestDataGoal
import threading
import time

def parse_args(args):
    parser = argparse.ArgumentParser(description="Script to continuously capture camera images")
    parser.add_argument("--left", help="If request to left camera", default=True, type=bool)
    parser.add_argument("--right", help="If request to right camera", default=True, type=bool)

    return parser.parse_args(args)

def connect_to_server(clients, timeout=20):
    for client in clients:
        if not client.wait_for_server(rospy.Duration(timeout)):
            rospy.logerr("The camera node is not running!")
            return False      
        else: 
            return True

def request_image(client):
    # Disparity Map
    goal = RequestDataGoal(
        linked_camera_request=True, request_disparity_map=True, log_time=True, request_depth_map=True,request_linked_camera_rgb_image=True
    )
    client.send_goal(goal)
    client.wait_for_result()

    if client.get_state() != GoalStatus.SUCCEEDED:
        rospy.logwarn("Action was not successful. Closing...")
        rospy.signal_shutdown()
    else:
        result = client.get_result()
        return result

def loop_request_image(client):
    while not rospy.is_shutdown():
        request_image(client)
        rospy.sleep(0.01) 


def main(left_cam, right_cam):
    
    # Create action client
    if left_cam:
        left_img_capture_client = actionlib.SimpleActionClient(
            "camera_left/request_data", RequestDataAction
        )
        # Connect to server
        if not connect_to_server([left_img_capture_client]):
            rospy.logerr("The camera node is not running!")
            sys.exit()

        left_cam_thread = threading.Thread(target=loop_request_image, args=[left_img_capture_client])
        left_cam_thread.start()

    if right_cam:
        right_img_capture_client = actionlib.SimpleActionClient(
            "camera_right/request_data", RequestDataAction
        )

        # Connect to server
        if not connect_to_server([right_img_capture_client]):
            rospy.logerr("The camera node is not running!")
            sys.exit()

        right_cam_thread = threading.Thread(target=loop_request_image, args=[right_img_capture_client])
        right_cam_thread.start()

    log_interval = 10
    last_log = time.time()
    start_time = time.time()

    while not rospy.is_shutdown():
        if time.time() - last_log > log_interval:
            last_log = time.time()
            print("Requesting images for {}".format(time.time() - start_time))
    
        rospy.sleep(0.01)


if __name__ == "__main__":
    try:
        rospy.init_node("ensenso_camera_request_images")
        args = sys.argv[1:]
        args = parse_args(args)
        main(left_cam=args.left, right_cam=args.right)
    except rospy.ROSInterruptException:
        pass
